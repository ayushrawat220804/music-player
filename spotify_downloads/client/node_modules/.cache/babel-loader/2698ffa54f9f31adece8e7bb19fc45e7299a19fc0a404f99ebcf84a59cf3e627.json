{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\spotify\\\\spotify_downloads\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport GoogleDriveSelector from './components/GoogleDriveSelector';\nimport LocalFileSelector from './components/LocalFileSelector';\nimport { EnhancedAudioPlayer } from './components/audio-player';\n\n// Extend the TrackMetadata type to include url\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [allTracks, setAllTracks] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\n  const [isShuffled, setIsShuffled] = useState(false);\n  const [shuffledIndexes, setShuffledIndexes] = useState([]);\n  const [shuffleHistory, setShuffleHistory] = useState([]);\n  const [shuffleHistoryIndex, setShuffleHistoryIndex] = useState(-1);\n  useEffect(() => {\n    if (currentTrack !== null && currentTrack !== void 0 && currentTrack.url) {\n      const index = allTracks.findIndex(track => {\n        // Try different matching strategies\n        if (`http://localhost:5000/api/stream/${track.id}` === currentTrack.url) {\n          return true;\n        }\n        if (track.path === currentTrack.url) {\n          return true;\n        }\n        return false;\n      });\n      setCurrentTrackIndex(index);\n    }\n  }, [currentTrack, allTracks]);\n\n  // Add a function to generate shuffled indexes\n  const generateShuffledIndexes = useCallback(() => {\n    if (allTracks.length === 0) return [];\n\n    // Create an array of indexes and shuffle it\n    const indexes = Array.from({\n      length: allTracks.length\n    }, (_, i) => i);\n\n    // Fisher-Yates shuffle algorithm\n    for (let i = indexes.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [indexes[i], indexes[j]] = [indexes[j], indexes[i]];\n    }\n    return indexes;\n  }, [allTracks.length]);\n  const handleGoogleDriveFileSelect = useCallback((fileUrl, fileName) => {\n    setCurrentTrack({\n      url: fileUrl,\n      metadata: {\n        title: fileName,\n        artist: 'Google Drive',\n        album: 'Cloud Storage'\n      }\n    });\n  }, []);\n  const handleLocalFileSelect = useCallback((fileUrl, metadata) => {\n    setCurrentTrack({\n      url: fileUrl,\n      metadata\n    });\n  }, []);\n  const handleTracksLoaded = useCallback(tracks => {\n    console.log('Tracks loaded:', tracks);\n    setAllTracks(tracks);\n\n    // Reset shuffle indexes when new tracks are loaded\n    if (isShuffled) {\n      console.log('Tracks changed, regenerating shuffle order');\n      setShuffledIndexes(generateShuffledIndexes());\n    }\n  }, [isShuffled, generateShuffledIndexes]);\n\n  // Add this function to properly format the audio URL\n  const getProperAudioUrl = trackPath => {\n    if (!trackPath) return '';\n    console.log('Original track path:', trackPath);\n\n    // If it's already a full URL, return it as is\n    if (trackPath.startsWith('http')) {\n      return trackPath;\n    }\n\n    // If it's already an API path, return it as is\n    if (trackPath.startsWith('/api/')) {\n      return trackPath;\n    }\n\n    // If it's a Windows path, ensure it's properly formatted\n    // Replace backslashes with forward slashes for the URL\n    let formattedPath = trackPath.replace(/\\\\/g, '/');\n\n    // Make sure the path is properly encoded for URLs\n    formattedPath = encodeURIComponent(formattedPath);\n\n    // Return the full API URL\n    const finalUrl = `/api/audio?path=${formattedPath}`;\n    console.log('Formatted URL:', finalUrl);\n    return finalUrl;\n  };\n  const handleTrackSelect = track => {\n    const index = allTracks.findIndex(t => t.path === track.path);\n    if (index !== -1) {\n      setCurrentTrackIndex(index);\n\n      // Update shuffle history when directly selecting a track\n      if (isShuffled) {\n        // If we're in the middle of the history, truncate the history\n        const newHistory = shuffleHistoryIndex >= 0 ? [...shuffleHistory.slice(0, shuffleHistoryIndex + 1), index] : [index];\n        setShuffleHistory(newHistory);\n        setShuffleHistoryIndex(newHistory.length - 1);\n        console.log('Updated shuffle history after track select:', newHistory);\n      }\n\n      // When selecting a track directly, use the original path format\n      setCurrentTrack({\n        url: track.path,\n        metadata: {\n          title: track.title,\n          artist: track.artist,\n          album: track.album,\n          coverArt: track.coverArt || undefined\n        }\n      });\n    }\n  };\n\n  // Modified function to get the next track index based on shuffle state\n  const getNextTrackIndex = useCallback(() => {\n    if (!isShuffled) {\n      // Normal sequential playback\n      return currentTrackIndex < allTracks.length - 1 ? currentTrackIndex + 1 : -1;\n    } else {\n      if (allTracks.length === 0) return -1;\n\n      // If we're not at the end of the history, move forward in history\n      if (shuffleHistoryIndex < shuffleHistory.length - 1) {\n        return shuffleHistory[shuffleHistoryIndex + 1];\n      }\n\n      // Otherwise pick a random track that's not the current one\n      if (allTracks.length > 1) {\n        // Create a list of available indexes (excluding current track)\n        const availableIndexes = Array.from({\n          length: allTracks.length\n        }, (_, i) => i).filter(idx => idx !== currentTrackIndex);\n\n        // Randomly select one\n        const randomIndex = Math.floor(Math.random() * availableIndexes.length);\n        return availableIndexes[randomIndex];\n      } else if (allTracks.length === 1) {\n        // Only one track, repeat it\n        return currentTrackIndex;\n      }\n      return -1;\n    }\n  }, [currentTrackIndex, allTracks.length, isShuffled, shuffleHistory, shuffleHistoryIndex]);\n\n  // Modified function to get the previous track index based on shuffle state\n  const getPreviousTrackIndex = useCallback(() => {\n    if (!isShuffled) {\n      // Normal sequential playback\n      return currentTrackIndex > 0 ? currentTrackIndex - 1 : -1;\n    } else {\n      // If we have history and not at the beginning, go back in history\n      if (shuffleHistory.length > 0 && shuffleHistoryIndex > 0) {\n        return shuffleHistory[shuffleHistoryIndex - 1];\n      }\n      return -1;\n    }\n  }, [currentTrackIndex, isShuffled, shuffleHistory, shuffleHistoryIndex]);\n\n  // Handle shuffle toggle from the audio player\n  const handleShuffleChange = useCallback(shuffleState => {\n    setIsShuffled(shuffleState);\n    if (shuffleState) {\n      console.log('Shuffle enabled - preparing shuffle mode');\n      if (currentTrackIndex !== -1) {\n        // Initialize shuffle history with current track\n        setShuffleHistory([currentTrackIndex]);\n        setShuffleHistoryIndex(0);\n      } else {\n        setShuffleHistory([]);\n        setShuffleHistoryIndex(-1);\n      }\n    } else {\n      console.log('Shuffle disabled - returning to sequential playback');\n      setShuffleHistory([]);\n      setShuffleHistoryIndex(-1);\n    }\n  }, [currentTrackIndex]);\n\n  // Update the handle functions to use the shuffle-aware logic\n  const handlePreviousTrack = () => {\n    const newIndex = getPreviousTrackIndex();\n    if (newIndex !== -1) {\n      setCurrentTrackIndex(newIndex);\n\n      // Update shuffle history index if in shuffle mode\n      if (isShuffled && shuffleHistoryIndex > 0) {\n        setShuffleHistoryIndex(shuffleHistoryIndex - 1);\n      }\n      const track = allTracks[newIndex];\n      console.log(`Playing previous track ${isShuffled ? '(shuffled)' : ''}: ${track.title}`);\n      setCurrentTrack({\n        url: track.path,\n        metadata: {\n          title: track.title,\n          artist: track.artist,\n          album: track.album,\n          coverArt: track.coverArt || undefined\n        }\n      });\n    }\n  };\n  const handleNextTrack = () => {\n    const newIndex = getNextTrackIndex();\n    if (newIndex !== -1) {\n      setCurrentTrackIndex(newIndex);\n\n      // Update shuffle history\n      if (isShuffled) {\n        if (shuffleHistoryIndex < shuffleHistory.length - 1) {\n          // Moving forward in existing history\n          setShuffleHistoryIndex(shuffleHistoryIndex + 1);\n        } else {\n          // Add new track to history\n          const newHistory = [...shuffleHistory.slice(0, shuffleHistoryIndex + 1), newIndex];\n          setShuffleHistory(newHistory);\n          setShuffleHistoryIndex(newHistory.length - 1);\n          console.log('Updated shuffle history:', newHistory, 'Current index:', newHistory.length - 1);\n        }\n      }\n      const track = allTracks[newIndex];\n      console.log(`Playing next track ${isShuffled ? '(shuffled)' : ''}: ${track.title}`);\n      setCurrentTrack({\n        url: track.path,\n        metadata: {\n          title: track.title,\n          artist: track.artist,\n          album: track.album,\n          coverArt: track.coverArt || undefined\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        children: \"Spotify Local\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n        children: \"Play music from your local files or Google Drive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        children: [/*#__PURE__*/_jsxDEV(TabList, {\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            children: \"Local Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            children: \"Google Drive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          children: /*#__PURE__*/_jsxDEV(LocalFileSelector, {\n            onFileSelect: handleLocalFileSelect,\n            onTracksLoaded: handleTracksLoaded,\n            onTrackSelect: handleTrackSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          children: /*#__PURE__*/_jsxDEV(GoogleDriveSelector, {\n            onFileSelect: handleGoogleDriveFileSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), currentTrack ? /*#__PURE__*/_jsxDEV(EnhancedAudioPlayer, {\n        url: currentTrack.url,\n        metadata: currentTrack.metadata,\n        onPrevious: handlePreviousTrack,\n        onNext: handleNextTrack,\n        hasPrevious: getPreviousTrackIndex() !== -1,\n        hasNext: allTracks.length > 0 // In shuffle mode, always have a next track if any tracks exist\n        ,\n        onShuffleChange: handleShuffleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(EmptyState, {\n        children: /*#__PURE__*/_jsxDEV(EmptyStateText, {\n          children: \"Select a song to play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/Rhkft4clgxHymCf4ZRLOQQruuY=\");\n_c = App;\nconst Container = styled.div`\n  min-height: 100vh;\n  background: #121212;\n  color: white;\n  padding: 20px;\n`;\n_c2 = Container;\nconst Header = styled.header`\n  text-align: center;\n  margin-bottom: 30px;\n`;\n_c3 = Header;\nconst Logo = styled.h1`\n  font-size: 2.5em;\n  color: #1DB954;\n  margin: 0;\n`;\n_c4 = Logo;\nconst Subtitle = styled.p`\n  color: rgba(255, 255, 255, 0.7);\n  margin: 10px 0 0;\n`;\n_c5 = Subtitle;\nconst MainContent = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c6 = MainContent;\nconst EmptyState = styled.div`\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 8px;\n  padding: 40px;\n  text-align: center;\n  margin-top: 20px;\n`;\n_c7 = EmptyState;\nconst EmptyStateText = styled.p`\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.2em;\n  margin: 0;\n`;\n_c8 = EmptyStateText;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Header\");\n$RefreshReg$(_c4, \"Logo\");\n$RefreshReg$(_c5, \"Subtitle\");\n$RefreshReg$(_c6, \"MainContent\");\n$RefreshReg$(_c7, \"EmptyState\");\n$RefreshReg$(_c8, \"EmptyStateText\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","Tab","Tabs","TabList","TabPanel","GoogleDriveSelector","LocalFileSelector","EnhancedAudioPlayer","jsxDEV","_jsxDEV","App","_s","currentTrack","setCurrentTrack","allTracks","setAllTracks","currentTrackIndex","setCurrentTrackIndex","isShuffled","setIsShuffled","shuffledIndexes","setShuffledIndexes","shuffleHistory","setShuffleHistory","shuffleHistoryIndex","setShuffleHistoryIndex","url","index","findIndex","track","id","path","generateShuffledIndexes","length","indexes","Array","from","_","i","j","Math","floor","random","handleGoogleDriveFileSelect","fileUrl","fileName","metadata","title","artist","album","handleLocalFileSelect","handleTracksLoaded","tracks","console","log","getProperAudioUrl","trackPath","startsWith","formattedPath","replace","encodeURIComponent","finalUrl","handleTrackSelect","t","newHistory","slice","coverArt","undefined","getNextTrackIndex","availableIndexes","filter","idx","randomIndex","getPreviousTrackIndex","handleShuffleChange","shuffleState","handlePreviousTrack","newIndex","handleNextTrack","Container","children","Header","Logo","_jsxFileName","lineNumber","columnNumber","Subtitle","MainContent","onFileSelect","onTracksLoaded","onTrackSelect","onPrevious","onNext","hasPrevious","hasNext","onShuffleChange","EmptyState","EmptyStateText","_c","div","_c2","header","_c3","h1","_c4","p","_c5","main","_c6","_c7","_c8","$RefreshReg$"],"sources":["C:/Users/rohit/spotify/spotify_downloads/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport GoogleDriveSelector from './components/GoogleDriveSelector';\r\nimport LocalFileSelector from './components/LocalFileSelector';\r\nimport { EnhancedAudioPlayer } from './components/audio-player';\r\nimport { TrackMetadata, Track } from './types';\r\n\r\n// Extend the TrackMetadata type to include url\r\ninterface EnhancedTrackMetadata extends TrackMetadata {\r\n  url: string;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [currentTrack, setCurrentTrack] = useState<{ url: string; metadata?: Omit<TrackMetadata, 'url'> } | null>(null);\r\n  const [allTracks, setAllTracks] = useState<Track[]>([]);\r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState<number>(-1);\r\n  const [isShuffled, setIsShuffled] = useState<boolean>(false);\r\n  const [shuffledIndexes, setShuffledIndexes] = useState<number[]>([]);\r\n  const [shuffleHistory, setShuffleHistory] = useState<number[]>([]);\r\n  const [shuffleHistoryIndex, setShuffleHistoryIndex] = useState<number>(-1);\r\n  \r\n  useEffect(() => {\r\n    if (currentTrack?.url) {\r\n      const index = allTracks.findIndex(track => {\r\n        // Try different matching strategies\r\n        if (`http://localhost:5000/api/stream/${track.id}` === currentTrack.url) {\r\n          return true;\r\n        }\r\n        \r\n        if (track.path === currentTrack.url) {\r\n          return true;\r\n        }\r\n        \r\n        return false;\r\n      });\r\n      \r\n      setCurrentTrackIndex(index);\r\n    }\r\n  }, [currentTrack, allTracks]);\r\n\r\n  // Add a function to generate shuffled indexes\r\n  const generateShuffledIndexes = useCallback(() => {\r\n    if (allTracks.length === 0) return [];\r\n    \r\n    // Create an array of indexes and shuffle it\r\n    const indexes = Array.from({ length: allTracks.length }, (_, i) => i);\r\n    \r\n    // Fisher-Yates shuffle algorithm\r\n    for (let i = indexes.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [indexes[i], indexes[j]] = [indexes[j], indexes[i]];\r\n    }\r\n    \r\n    return indexes;\r\n  }, [allTracks.length]);\r\n\r\n  const handleGoogleDriveFileSelect = useCallback((fileUrl: string, fileName: string) => {\r\n    setCurrentTrack({ \r\n      url: fileUrl, \r\n      metadata: {\r\n        title: fileName,\r\n        artist: 'Google Drive',\r\n        album: 'Cloud Storage'\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleLocalFileSelect = useCallback((fileUrl: string, metadata?: TrackMetadata) => {\r\n    setCurrentTrack({ url: fileUrl, metadata });\r\n  }, []);\r\n\r\n  const handleTracksLoaded = useCallback((tracks: Track[]) => {\r\n    console.log('Tracks loaded:', tracks);\r\n    setAllTracks(tracks);\r\n    \r\n    // Reset shuffle indexes when new tracks are loaded\r\n    if (isShuffled) {\r\n      console.log('Tracks changed, regenerating shuffle order');\r\n      setShuffledIndexes(generateShuffledIndexes());\r\n    }\r\n  }, [isShuffled, generateShuffledIndexes]);\r\n\r\n  // Add this function to properly format the audio URL\r\n  const getProperAudioUrl = (trackPath: string) => {\r\n    if (!trackPath) return '';\r\n    \r\n    console.log('Original track path:', trackPath);\r\n    \r\n    // If it's already a full URL, return it as is\r\n    if (trackPath.startsWith('http')) {\r\n      return trackPath;\r\n    }\r\n    \r\n    // If it's already an API path, return it as is\r\n    if (trackPath.startsWith('/api/')) {\r\n      return trackPath;\r\n    }\r\n    \r\n    // If it's a Windows path, ensure it's properly formatted\r\n    // Replace backslashes with forward slashes for the URL\r\n    let formattedPath = trackPath.replace(/\\\\/g, '/');\r\n    \r\n    // Make sure the path is properly encoded for URLs\r\n    formattedPath = encodeURIComponent(formattedPath);\r\n    \r\n    // Return the full API URL\r\n    const finalUrl = `/api/audio?path=${formattedPath}`;\r\n    console.log('Formatted URL:', finalUrl);\r\n    return finalUrl;\r\n  };\r\n\r\n  const handleTrackSelect = (track: Track) => {\r\n    const index = allTracks.findIndex(t => t.path === track.path);\r\n    if (index !== -1) {\r\n      setCurrentTrackIndex(index);\r\n      \r\n      // Update shuffle history when directly selecting a track\r\n      if (isShuffled) {\r\n        // If we're in the middle of the history, truncate the history\r\n        const newHistory = shuffleHistoryIndex >= 0 \r\n          ? [...shuffleHistory.slice(0, shuffleHistoryIndex + 1), index]\r\n          : [index];\r\n        \r\n        setShuffleHistory(newHistory);\r\n        setShuffleHistoryIndex(newHistory.length - 1);\r\n        console.log('Updated shuffle history after track select:', newHistory);\r\n      }\r\n      \r\n      // When selecting a track directly, use the original path format\r\n      setCurrentTrack({\r\n        url: track.path,\r\n        metadata: {\r\n          title: track.title,\r\n          artist: track.artist,\r\n          album: track.album,\r\n          coverArt: track.coverArt || undefined\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Modified function to get the next track index based on shuffle state\r\n  const getNextTrackIndex = useCallback(() => {\r\n    if (!isShuffled) {\r\n      // Normal sequential playback\r\n      return currentTrackIndex < allTracks.length - 1 ? currentTrackIndex + 1 : -1;\r\n    } else {\r\n      if (allTracks.length === 0) return -1;\r\n      \r\n      // If we're not at the end of the history, move forward in history\r\n      if (shuffleHistoryIndex < shuffleHistory.length - 1) {\r\n        return shuffleHistory[shuffleHistoryIndex + 1];\r\n      }\r\n      \r\n      // Otherwise pick a random track that's not the current one\r\n      if (allTracks.length > 1) {\r\n        // Create a list of available indexes (excluding current track)\r\n        const availableIndexes = Array.from({ length: allTracks.length }, (_, i) => i)\r\n          .filter(idx => idx !== currentTrackIndex);\r\n        \r\n        // Randomly select one\r\n        const randomIndex = Math.floor(Math.random() * availableIndexes.length);\r\n        return availableIndexes[randomIndex];\r\n      } else if (allTracks.length === 1) {\r\n        // Only one track, repeat it\r\n        return currentTrackIndex;\r\n      }\r\n      \r\n      return -1;\r\n    }\r\n  }, [currentTrackIndex, allTracks.length, isShuffled, shuffleHistory, shuffleHistoryIndex]);\r\n  \r\n  // Modified function to get the previous track index based on shuffle state\r\n  const getPreviousTrackIndex = useCallback(() => {\r\n    if (!isShuffled) {\r\n      // Normal sequential playback\r\n      return currentTrackIndex > 0 ? currentTrackIndex - 1 : -1;\r\n    } else {\r\n      // If we have history and not at the beginning, go back in history\r\n      if (shuffleHistory.length > 0 && shuffleHistoryIndex > 0) {\r\n        return shuffleHistory[shuffleHistoryIndex - 1];\r\n      }\r\n      \r\n      return -1;\r\n    }\r\n  }, [currentTrackIndex, isShuffled, shuffleHistory, shuffleHistoryIndex]);\r\n\r\n  // Handle shuffle toggle from the audio player\r\n  const handleShuffleChange = useCallback((shuffleState: boolean) => {\r\n    setIsShuffled(shuffleState);\r\n    if (shuffleState) {\r\n      console.log('Shuffle enabled - preparing shuffle mode');\r\n      if (currentTrackIndex !== -1) {\r\n        // Initialize shuffle history with current track\r\n        setShuffleHistory([currentTrackIndex]);\r\n        setShuffleHistoryIndex(0);\r\n      } else {\r\n        setShuffleHistory([]);\r\n        setShuffleHistoryIndex(-1);\r\n      }\r\n    } else {\r\n      console.log('Shuffle disabled - returning to sequential playback');\r\n      setShuffleHistory([]);\r\n      setShuffleHistoryIndex(-1);\r\n    }\r\n  }, [currentTrackIndex]);\r\n\r\n  // Update the handle functions to use the shuffle-aware logic\r\n  const handlePreviousTrack = () => {\r\n    const newIndex = getPreviousTrackIndex();\r\n    if (newIndex !== -1) {\r\n      setCurrentTrackIndex(newIndex);\r\n      \r\n      // Update shuffle history index if in shuffle mode\r\n      if (isShuffled && shuffleHistoryIndex > 0) {\r\n        setShuffleHistoryIndex(shuffleHistoryIndex - 1);\r\n      }\r\n      \r\n      const track = allTracks[newIndex];\r\n      \r\n      console.log(`Playing previous track ${isShuffled ? '(shuffled)' : ''}: ${track.title}`);\r\n      \r\n      setCurrentTrack({\r\n        url: track.path,\r\n        metadata: {\r\n          title: track.title,\r\n          artist: track.artist,\r\n          album: track.album,\r\n          coverArt: track.coverArt || undefined\r\n        }\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleNextTrack = () => {\r\n    const newIndex = getNextTrackIndex();\r\n    if (newIndex !== -1) {\r\n      setCurrentTrackIndex(newIndex);\r\n      \r\n      // Update shuffle history\r\n      if (isShuffled) {\r\n        if (shuffleHistoryIndex < shuffleHistory.length - 1) {\r\n          // Moving forward in existing history\r\n          setShuffleHistoryIndex(shuffleHistoryIndex + 1);\r\n        } else {\r\n          // Add new track to history\r\n          const newHistory = [...shuffleHistory.slice(0, shuffleHistoryIndex + 1), newIndex];\r\n          setShuffleHistory(newHistory);\r\n          setShuffleHistoryIndex(newHistory.length - 1);\r\n          console.log('Updated shuffle history:', newHistory, 'Current index:', newHistory.length - 1);\r\n        }\r\n      }\r\n      \r\n      const track = allTracks[newIndex];\r\n      \r\n      console.log(`Playing next track ${isShuffled ? '(shuffled)' : ''}: ${track.title}`);\r\n      \r\n      setCurrentTrack({\r\n        url: track.path,\r\n        metadata: {\r\n          title: track.title,\r\n          artist: track.artist,\r\n          album: track.album,\r\n          coverArt: track.coverArt || undefined\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <Logo>Spotify Local</Logo>\r\n        <Subtitle>Play music from your local files or Google Drive</Subtitle>\r\n      </Header>\r\n\r\n      <MainContent>\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Local Files</Tab>\r\n            <Tab>Google Drive</Tab>\r\n          </TabList>\r\n\r\n          <TabPanel>\r\n            <LocalFileSelector \r\n              onFileSelect={handleLocalFileSelect} \r\n              onTracksLoaded={handleTracksLoaded}\r\n              onTrackSelect={handleTrackSelect}\r\n            />\r\n          </TabPanel>\r\n          \r\n          <TabPanel>\r\n            <GoogleDriveSelector onFileSelect={handleGoogleDriveFileSelect} />\r\n          </TabPanel>\r\n        </Tabs>\r\n\r\n        {currentTrack ? (\r\n          <EnhancedAudioPlayer \r\n            url={currentTrack.url}\r\n            metadata={currentTrack.metadata}\r\n            onPrevious={handlePreviousTrack}\r\n            onNext={handleNextTrack}\r\n            hasPrevious={getPreviousTrackIndex() !== -1}\r\n            hasNext={allTracks.length > 0} // In shuffle mode, always have a next track if any tracks exist\r\n            onShuffleChange={handleShuffleChange}\r\n          />\r\n        ) : (\r\n          <EmptyState>\r\n            <EmptyStateText>\r\n              Select a song to play\r\n            </EmptyStateText>\r\n          </EmptyState>\r\n        )}\r\n      </MainContent>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  min-height: 100vh;\r\n  background: #121212;\r\n  color: white;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Logo = styled.h1`\r\n  font-size: 2.5em;\r\n  color: #1DB954;\r\n  margin: 0;\r\n`;\r\n\r\nconst Subtitle = styled.p`\r\n  color: rgba(255, 255, 255, 0.7);\r\n  margin: 10px 0 0;\r\n`;\r\n\r\nconst MainContent = styled.main`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst EmptyState = styled.div`\r\n  background: rgba(0, 0, 0, 0.3);\r\n  border-radius: 8px;\r\n  padding: 40px;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst EmptyStateText = styled.p`\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 1.2em;\r\n  margin: 0;\r\n`;\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}