{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\r\n * Custom hook to analyze audio frequencies and extract bass data\r\n */\nexport const useAudioAnalysis = (analyser, isPlaying, animationFrameRef) => {\n  _s();\n  const [bassValue, setBassValue] = useState(0);\n\n  // Audio analysis loop with improved bass detection\n  useEffect(() => {\n    if (!analyser || !isPlaying) {\n      // Reset bass value when not playing\n      if (!isPlaying) {\n        setBassValue(0);\n      }\n      return;\n    }\n    try {\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      const analyzeBass = () => {\n        try {\n          analyser.getByteFrequencyData(dataArray);\n\n          // Focus more precisely on bass frequencies (typically 20-150Hz)\n          // For 44.1kHz sample rate with 256 FFT size, first ~8 bins cover roughly 0-170Hz\n          const bassRange = 8;\n          let bassSum = 0;\n          let maxBassValue = 0;\n\n          // Sum the bass frequency bins with emphasis on the lower end\n          for (let i = 0; i < bassRange; i++) {\n            const value = dataArray[i];\n            bassSum += value;\n            maxBassValue = Math.max(maxBassValue, value);\n          }\n\n          // Normalize between 0 and 1, with more pronounced range\n          // Using both average and max for more dynamic response\n          const avgBass = bassSum / (bassRange * 255);\n          const normalizedBass = Math.min(1, avgBass * 0.7 + maxBassValue / 255 * 0.3);\n\n          // Apply non-linear scaling to make subtle differences more noticeable\n          const scaledBass = Math.pow(normalizedBass, 0.8) * 0.8;\n          setBassValue(scaledBass);\n\n          // Continue the animation loop\n          animationFrameRef.current = requestAnimationFrame(analyzeBass);\n        } catch (err) {\n          console.error('Error in audio analysis:', err);\n          setBassValue(0);\n        }\n      };\n\n      // Start the analysis loop\n      analyzeBass();\n    } catch (err) {\n      console.error('Error setting up audio analysis loop:', err);\n    }\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    };\n  }, [analyser, isPlaying, animationFrameRef]);\n  return {\n    bassValue\n  };\n};\n_s(useAudioAnalysis, \"p3jQbOlODbXotbfnkkaOwM8xuT0=\");\nexport default useAudioAnalysis;","map":{"version":3,"names":["useState","useEffect","useAudioAnalysis","analyser","isPlaying","animationFrameRef","_s","bassValue","setBassValue","bufferLength","frequencyBinCount","dataArray","Uint8Array","analyzeBass","getByteFrequencyData","bassRange","bassSum","maxBassValue","i","value","Math","max","avgBass","normalizedBass","min","scaledBass","pow","current","requestAnimationFrame","err","console","error","cancelAnimationFrame"],"sources":["C:/Users/rohit/spotify/spotify_downloads/client/src/components/audio-player/hooks/useAudioAnalysis.ts"],"sourcesContent":["import { useState, useEffect, MutableRefObject } from 'react';\r\n\r\n/**\r\n * Custom hook to analyze audio frequencies and extract bass data\r\n */\r\nexport const useAudioAnalysis = (\r\n  analyser: AnalyserNode | null,\r\n  isPlaying: boolean,\r\n  animationFrameRef: MutableRefObject<number | null>\r\n) => {\r\n  const [bassValue, setBassValue] = useState<number>(0);\r\n\r\n  // Audio analysis loop with improved bass detection\r\n  useEffect(() => {\r\n    if (!analyser || !isPlaying) {\r\n      // Reset bass value when not playing\r\n      if (!isPlaying) {\r\n        setBassValue(0);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const bufferLength = analyser.frequencyBinCount;\r\n      const dataArray = new Uint8Array(bufferLength);\r\n      \r\n      const analyzeBass = () => {\r\n        try {\r\n          analyser.getByteFrequencyData(dataArray);\r\n          \r\n          // Focus more precisely on bass frequencies (typically 20-150Hz)\r\n          // For 44.1kHz sample rate with 256 FFT size, first ~8 bins cover roughly 0-170Hz\r\n          const bassRange = 8; \r\n          let bassSum = 0;\r\n          let maxBassValue = 0;\r\n          \r\n          // Sum the bass frequency bins with emphasis on the lower end\r\n          for (let i = 0; i < bassRange; i++) {\r\n            const value = dataArray[i];\r\n            bassSum += value;\r\n            maxBassValue = Math.max(maxBassValue, value);\r\n          }\r\n          \r\n          // Normalize between 0 and 1, with more pronounced range\r\n          // Using both average and max for more dynamic response\r\n          const avgBass = bassSum / (bassRange * 255);\r\n          const normalizedBass = Math.min(1, (avgBass * 0.7 + (maxBassValue / 255) * 0.3));\r\n          \r\n          // Apply non-linear scaling to make subtle differences more noticeable\r\n          const scaledBass = Math.pow(normalizedBass, 0.8) * 0.8;\r\n          \r\n          setBassValue(scaledBass);\r\n          \r\n          // Continue the animation loop\r\n          animationFrameRef.current = requestAnimationFrame(analyzeBass);\r\n        } catch (err) {\r\n          console.error('Error in audio analysis:', err);\r\n          setBassValue(0);\r\n        }\r\n      };\r\n      \r\n      // Start the analysis loop\r\n      analyzeBass();\r\n    } catch (err) {\r\n      console.error('Error setting up audio analysis loop:', err);\r\n    }\r\n    \r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n        animationFrameRef.current = null;\r\n      }\r\n    };\r\n  }, [analyser, isPlaying, animationFrameRef]);\r\n\r\n  return { bassValue };\r\n};\r\n\r\nexport default useAudioAnalysis; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAA0B,OAAO;;AAE7D;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAC9BC,QAA6B,EAC7BC,SAAkB,EAClBC,iBAAkD,KAC/C;EAAAC,EAAA;EACH,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAS,CAAC,CAAC;;EAErD;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,CAACE,QAAQ,IAAI,CAACC,SAAS,EAAE;MAC3B;MACA,IAAI,CAACA,SAAS,EAAE;QACdI,YAAY,CAAC,CAAC,CAAC;MACjB;MACA;IACF;IAEA,IAAI;MACF,MAAMC,YAAY,GAAGN,QAAQ,CAACO,iBAAiB;MAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;MAE9C,MAAMI,WAAW,GAAGA,CAAA,KAAM;QACxB,IAAI;UACFV,QAAQ,CAACW,oBAAoB,CAACH,SAAS,CAAC;;UAExC;UACA;UACA,MAAMI,SAAS,GAAG,CAAC;UACnB,IAAIC,OAAO,GAAG,CAAC;UACf,IAAIC,YAAY,GAAG,CAAC;;UAEpB;UACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,EAAE,EAAE;YAClC,MAAMC,KAAK,GAAGR,SAAS,CAACO,CAAC,CAAC;YAC1BF,OAAO,IAAIG,KAAK;YAChBF,YAAY,GAAGG,IAAI,CAACC,GAAG,CAACJ,YAAY,EAAEE,KAAK,CAAC;UAC9C;;UAEA;UACA;UACA,MAAMG,OAAO,GAAGN,OAAO,IAAID,SAAS,GAAG,GAAG,CAAC;UAC3C,MAAMQ,cAAc,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC,EAAGF,OAAO,GAAG,GAAG,GAAIL,YAAY,GAAG,GAAG,GAAI,GAAI,CAAC;;UAEhF;UACA,MAAMQ,UAAU,GAAGL,IAAI,CAACM,GAAG,CAACH,cAAc,EAAE,GAAG,CAAC,GAAG,GAAG;UAEtDf,YAAY,CAACiB,UAAU,CAAC;;UAExB;UACApB,iBAAiB,CAACsB,OAAO,GAAGC,qBAAqB,CAACf,WAAW,CAAC;QAChE,CAAC,CAAC,OAAOgB,GAAG,EAAE;UACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;UAC9CrB,YAAY,CAAC,CAAC,CAAC;QACjB;MACF,CAAC;;MAED;MACAK,WAAW,CAAC,CAAC;IACf,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;IAC7D;IAEA,OAAO,MAAM;MACX,IAAIxB,iBAAiB,CAACsB,OAAO,EAAE;QAC7BK,oBAAoB,CAAC3B,iBAAiB,CAACsB,OAAO,CAAC;QAC/CtB,iBAAiB,CAACsB,OAAO,GAAG,IAAI;MAClC;IACF,CAAC;EACH,CAAC,EAAE,CAACxB,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,CAAC,CAAC;EAE5C,OAAO;IAAEE;EAAU,CAAC;AACtB,CAAC;AAACD,EAAA,CAvEWJ,gBAAgB;AAyE7B,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}